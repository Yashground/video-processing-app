[{"start":0,"end":4340,"text":"Microservices explained in five minutes.","language":"english"},{"start":4340,"end":7920,"text":"Microservices are a popular architectural paradigm","language":"english"},{"start":7920,"end":11800,"text":"that addresses the limitations and drawbacks of legacy applications.","language":"english"},{"start":11800,"end":14720,"text":"To understand the foundation of microservices,","language":"english"},{"start":14720,"end":18100,"text":"we need to take a look at the history and evolution of","language":"english"},{"start":18100,"end":20840,"text":"application design from monolithic to","language":"english"},{"start":20840,"end":24000,"text":"multi-tier to microservice-based architectures.","language":"english"},{"start":24000,"end":28000,"text":"A straightforward way to build a simple application is to","language":"english"},{"start":28000,"end":34000,"text":"design it as a single piece of code encapsulating data storage and access,","language":"english"},{"start":34000,"end":38759,"text":"business logic and processes, and user interfaces.","language":"english"},{"start":38759,"end":41279,"text":"That used to be the way applications and","language":"english"},{"start":41279,"end":44659,"text":"system are designed and built in the early days.","language":"english"},{"start":44659,"end":48000,"text":"Soon, however, this all-in-one code model showed","language":"english"},{"start":48000,"end":51520,"text":"its limits when building complex, intricate systems.","language":"english"},{"start":51520,"end":53799,"text":"Since everything is tangled together,","language":"english"},{"start":53799,"end":56060,"text":"it becomes quickly difficult to maintain,","language":"english"},{"start":56060,"end":58459,"text":"evolve, and scale such applications.","language":"english"},{"start":58459,"end":62419,"text":"Software engineers proposed a solution to this complexity problem,","language":"english"},{"start":62419,"end":66139,"text":"the multi-tier architecture where application components","language":"english"},{"start":66139,"end":69459,"text":"are separated into layers based on technical functions.","language":"english"},{"start":69459,"end":72900,"text":"A common model is the three-tier architecture.","language":"english"},{"start":72900,"end":75660,"text":"It consists of three logical layers.","language":"english"},{"start":75660,"end":78339,"text":"A presentation layer covers all the code and","language":"english"},{"start":78339,"end":81019,"text":"components responsible for the interaction","language":"english"},{"start":81019,"end":83779,"text":"with users through visual interfaces.","language":"english"},{"start":83779,"end":87180,"text":"A logical layer encompasses all the business logic and","language":"english"},{"start":87180,"end":89860,"text":"processes relative to the business functions,","language":"english"},{"start":89860,"end":92819,"text":"and a data layer dealing with storing,","language":"english"},{"start":92819,"end":95620,"text":"accessing, and retrieving data when needed.","language":"english"},{"start":95620,"end":100860,"text":"While separating logic and data in two different layers made things better,","language":"english"},{"start":100860,"end":104779,"text":"it was still a centralized way to designing application,","language":"english"},{"start":104779,"end":107860,"text":"and it didn't address quite well the challenges","language":"english"},{"start":107860,"end":112099,"text":"associated with complex applications and systems.","language":"english"},{"start":112099,"end":115819,"text":"Let's take a look at these challenges.","language":"english"},{"start":115819,"end":119580,"text":"Application complexity has been exponentially growing.","language":"english"},{"start":119580,"end":122699,"text":"With the advent of global, high-growth,","language":"english"},{"start":122699,"end":126099,"text":"fast-evolving web and mobile applications,","language":"english"},{"start":126099,"end":130500,"text":"maintaining, evolving, and scaling very complex applications","language":"english"},{"start":130500,"end":134300,"text":"like Amazon e-commerce website or Google search engine","language":"english"},{"start":134300,"end":137259,"text":"required a design paradigm shift.","language":"english"},{"start":137259,"end":140979,"text":"Here again, the best way to tackle complexity is by","language":"english"},{"start":140979,"end":144139,"text":"decomposing it into manageable chunks.","language":"english"},{"start":144139,"end":147979,"text":"That is why software engineers decided to break apart","language":"english"},{"start":147979,"end":152820,"text":"the logic and data layers into smaller pieces called microservices.","language":"english"},{"start":152820,"end":156979,"text":"Every microservice deals with one business function,","language":"english"},{"start":156979,"end":160779,"text":"end-to-end, independently from other microservices.","language":"english"},{"start":160779,"end":165220,"text":"Microservices present simple, easy-to-understand APIs,","language":"english"},{"start":165220,"end":167619,"text":"and communicate with each other through","language":"english"},{"start":167619,"end":172979,"text":"lightweight common protocols such as HTTP or message queues.","language":"english"},{"start":172979,"end":176899,"text":"When an application is architected as a microservices,","language":"english"},{"start":176899,"end":182580,"text":"different teams can work separately and independently on different microservices,","language":"english"},{"start":182580,"end":186940,"text":"building new functions and evolving the business capabilities","language":"english"},{"start":186940,"end":190460,"text":"without impacting other teams and business functions.","language":"english"},{"start":190460,"end":193020,"text":"Theoretically, teams could even use","language":"english"},{"start":193020,"end":195500,"text":"different programming languages and deploy","language":"english"},{"start":195500,"end":198860,"text":"their microservices to different infrastructure.","language":"english"},{"start":198860,"end":202779,"text":"However, for cost reduction, efficiency improvement,","language":"english"},{"start":202779,"end":205339,"text":"and operational optimization reasons,","language":"english"},{"start":205339,"end":209660,"text":"host organization limit team choices to a set of approved tools,","language":"english"},{"start":209660,"end":212740,"text":"infrastructure providers, and programming languages.","language":"english"},{"start":212740,"end":216100,"text":"As applications continue evolving and growing,","language":"english"},{"start":216100,"end":219139,"text":"the number of microservices inside an organization","language":"english"},{"start":219139,"end":222539,"text":"could expand to tens, hundreds, or even thousands.","language":"english"},{"start":222660,"end":226539,"text":"As this happens, complexity starts creeping again.","language":"english"},{"start":226539,"end":230339,"text":"For example, if a microservice instance fails in production,","language":"english"},{"start":230339,"end":234539,"text":"it could generate cascade of outages within other microservices.","language":"english"},{"start":234539,"end":237539,"text":"Since the architecture is highly distributed,","language":"english"},{"start":237539,"end":243259,"text":"it could become difficult to identify the root cause and fix it in a timely manner.","language":"english"},{"start":243259,"end":248100,"text":"The software engineering community has been creating and inventing new tools","language":"english"},{"start":248139,"end":251500,"text":"to tackle and contain the ever-growing complexity","language":"english"},{"start":251500,"end":254899,"text":"of highly distributed microservice-based systems.","language":"english"},{"start":254899,"end":259179,"text":"Some of the popular tools include containerization","language":"english"},{"start":259179,"end":262260,"text":"that helps deploy microservices in minimalist,","language":"english"},{"start":262260,"end":265859,"text":"self-contained runtimes such as Docker containers,","language":"english"},{"start":265859,"end":269820,"text":"container orchestration systems that manage container's lifecycle,","language":"english"},{"start":269820,"end":273899,"text":"such as Kubernetes, pipeline automation for CI-CD,","language":"english"},{"start":273899,"end":277339,"text":"asynchronous messaging that further decouples microservices","language":"english"},{"start":277339,"end":279980,"text":"by providing message brokers and queues,","language":"english"},{"start":279980,"end":284739,"text":"application performance monitoring tools to track microservice performance,","language":"english"},{"start":284739,"end":289459,"text":"login and audit tools that help keep track of everything happening within the system.","language":"english"},{"start":291179,"end":295179,"text":"We need to understand that microservices are not a magic bullet","language":"english"},{"start":295179,"end":298619,"text":"that fixes all application design and development problems.","language":"english"},{"start":298619,"end":301940,"text":"Applications are still designed as monolithic","language":"english"},{"start":301940,"end":305299,"text":"when they are relatively simple with limited number of users","language":"english"},{"start":305299,"end":307140,"text":"and not fast-evolving.","language":"english"},{"start":307140,"end":310940,"text":"Remember that highly distributed systems are hard.","language":"english"}]